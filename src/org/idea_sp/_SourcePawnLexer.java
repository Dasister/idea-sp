/* The following code was generated by JFlex 1.4.3 on 3/11/15 1:00 AM */

package org.idea_sp;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static org.idea_sp.psi.SourcePawnTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/11/15 1:00 AM from the specification file
 * <tt>/Users/they4kman/programming/idea-sp/src/org/idea_sp/SourcePawn.flex</tt>
 */
public class _SourcePawnLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\50\1\42"+
    "\1\5\1\0\1\57\1\72\1\44\1\60\1\61\1\54\1\53\1\67"+
    "\1\27\1\34\1\4\1\35\1\41\10\32\1\31\1\66\1\70\1\47"+
    "\1\71\1\52\1\45\6\37\24\46\1\64\1\43\1\65\1\56\1\33"+
    "\1\0\1\6\1\40\1\23\1\13\1\10\1\14\1\24\1\75\1\15"+
    "\1\46\1\73\1\17\1\25\1\16\1\22\1\20\1\46\1\11\1\7"+
    "\1\12\1\21\1\77\1\74\1\36\1\26\1\76\1\62\1\55\1\63"+
    "\1\51\u05e1\0\12\30\206\0\12\30\u026c\0\12\30\166\0\12\30\166\0"+
    "\12\30\166\0\12\30\166\0\12\30\167\0\11\30\166\0\12\30\166\0"+
    "\12\30\166\0\12\30\340\0\12\30\166\0\12\30\106\0\12\30\u0116\0"+
    "\12\30\u031f\0\11\30\u046e\0\12\30\46\0\12\30\u012c\0\12\30\ue5c0\0"+
    "\12\30\346\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\1\16\4\1\5\1\6"+
    "\1\7\1\6\1\1\1\10\1\6\1\4\2\1\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\4\3\35\1\36\1\37\1\40"+
    "\12\0\13\4\1\41\1\4\1\42\7\4\1\43\1\44"+
    "\4\0\1\4\1\0\1\45\3\0\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\0\1\61\1\62\1\4\1\63\10\0\1\64\4\0"+
    "\16\4\1\65\1\4\1\66\5\4\1\67\1\70\1\71"+
    "\1\72\1\4\1\45\2\73\1\74\1\75\1\4\11\0"+
    "\7\4\1\76\1\77\1\100\4\4\1\101\4\4\1\102"+
    "\2\4\1\103\2\4\10\0\1\4\1\104\2\4\1\105"+
    "\1\4\1\106\2\4\1\107\6\4\1\110\1\4\1\111"+
    "\1\112\5\0\1\113\1\114\1\115\1\116\1\117\1\120"+
    "\3\4\1\121\1\122\2\4\2\0\1\123\1\124\1\125"+
    "\2\4\1\126\1\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\200\0\u0580"+
    "\0\u03c0\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740"+
    "\0\200\0\200\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\200"+
    "\0\200\0\200\0\200\0\200\0\200\0\200\0\200\0\u08c0"+
    "\0\u0900\0\u0940\0\u0980\0\200\0\u09c0\0\u0a00\0\u0a40\0\200"+
    "\0\200\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00"+
    "\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00"+
    "\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u03c0\0\u0fc0"+
    "\0\u03c0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180"+
    "\0\200\0\200\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u0680"+
    "\0\200\0\u1300\0\u1340\0\u1380\0\200\0\200\0\200\0\200"+
    "\0\200\0\200\0\200\0\200\0\200\0\200\0\u13c0\0\u1400"+
    "\0\200\0\200\0\u1440\0\200\0\u1480\0\u14c0\0\u1500\0\u1540"+
    "\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740"+
    "\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940"+
    "\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u1b40"+
    "\0\u1b80\0\u03c0\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00"+
    "\0\200\0\u1240\0\u1280\0\u1d40\0\u0680\0\200\0\u1340\0\200"+
    "\0\200\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00"+
    "\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100"+
    "\0\u2140\0\u2180\0\u03c0\0\u03c0\0\u03c0\0\u21c0\0\u2200\0\u2240"+
    "\0\u2280\0\u03c0\0\u22c0\0\u2300\0\u2340\0\u2380\0\u03c0\0\u23c0"+
    "\0\u2400\0\u03c0\0\u2440\0\u2480\0\u24c0\0\u2500\0\u2540\0\u2580"+
    "\0\u25c0\0\u2600\0\u2640\0\u2680\0\u26c0\0\u03c0\0\u2700\0\u2740"+
    "\0\u03c0\0\u2780\0\u03c0\0\u27c0\0\u2800\0\u03c0\0\u2840\0\u2880"+
    "\0\u28c0\0\u2900\0\u2940\0\u2980\0\u03c0\0\u29c0\0\u03c0\0\u03c0"+
    "\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u03c0\0\u03c0\0\u03c0"+
    "\0\u03c0\0\u03c0\0\u03c0\0\u2b40\0\u2b80\0\u2bc0\0\u03c0\0\u03c0"+
    "\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u03c0\0\u03c0\0\u03c0\0\u2d00"+
    "\0\u2d40\0\u03c0\0\u03c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\20"+
    "\1\22\1\23\1\24\2\20\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\2\20\1\34\1\30\1\35\1\3"+
    "\1\36\1\31\1\20\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\20"+
    "\1\63\3\20\1\64\1\65\52\64\1\66\23\64\101\0"+
    "\3\4\100\0\1\67\42\0\1\70\4\0\1\71\31\0"+
    "\1\72\1\73\1\74\1\0\1\75\1\76\1\77\1\100"+
    "\1\0\1\101\1\102\1\103\64\0\1\20\1\104\17\20"+
    "\3\0\2\20\1\0\5\20\3\0\2\20\24\0\5\20"+
    "\6\0\4\20\1\105\2\20\1\106\1\20\1\107\7\20"+
    "\3\0\2\20\1\0\5\20\3\0\2\20\24\0\1\20"+
    "\1\110\3\20\6\0\10\20\1\111\1\112\7\20\3\0"+
    "\2\20\1\0\1\20\1\113\3\20\3\0\2\20\24\0"+
    "\5\20\6\0\2\20\1\114\16\20\3\0\2\20\1\0"+
    "\5\20\3\0\2\20\24\0\5\20\6\0\1\115\20\20"+
    "\3\0\2\20\1\0\5\20\3\0\2\20\24\0\5\20"+
    "\6\0\2\20\1\116\11\20\1\117\4\20\3\0\2\20"+
    "\1\0\5\20\3\0\2\20\24\0\5\20\6\0\14\20"+
    "\1\120\4\20\3\0\2\20\1\0\5\20\3\0\2\20"+
    "\24\0\5\20\6\0\6\20\1\121\12\20\3\0\2\20"+
    "\1\0\5\20\3\0\2\20\24\0\5\20\6\0\1\122"+
    "\1\20\1\123\16\20\3\0\2\20\1\0\5\20\3\0"+
    "\2\20\24\0\5\20\6\0\21\20\3\0\2\20\1\0"+
    "\5\20\3\0\2\20\24\0\5\20\6\0\13\20\1\124"+
    "\5\20\3\0\2\20\1\0\5\20\3\0\2\20\24\0"+
    "\5\20\6\0\12\20\1\125\6\20\3\0\2\20\1\0"+
    "\5\20\3\0\2\20\24\0\5\20\6\0\1\126\13\20"+
    "\1\127\4\20\3\0\2\20\1\0\5\20\3\0\2\20"+
    "\24\0\5\20\6\0\14\20\1\130\4\20\3\0\2\20"+
    "\1\0\5\20\3\0\2\20\24\0\5\20\27\0\1\131"+
    "\1\26\1\0\1\30\2\0\1\33\3\0\1\30\5\0"+
    "\1\132\42\0\2\26\1\0\1\26\6\0\1\26\4\0"+
    "\1\26\1\0\1\26\56\0\1\26\1\30\1\0\1\26"+
    "\6\0\1\26\4\0\1\26\1\0\1\30\1\133\77\0"+
    "\1\134\55\0\1\26\1\30\1\0\1\26\6\0\1\26"+
    "\4\0\1\26\1\0\1\30\1\133\1\0\1\135\1\0"+
    "\1\136\45\0\3\20\1\137\15\20\3\0\2\20\1\0"+
    "\5\20\3\0\2\20\24\0\5\20\42\140\1\141\1\142"+
    "\34\140\42\143\1\0\1\144\34\143\47\0\1\145\77\0"+
    "\1\146\60\0\1\26\1\0\1\30\2\0\1\33\3\0"+
    "\1\30\5\0\1\147\3\0\1\150\73\0\1\151\77\0"+
    "\1\152\5\0\1\153\71\0\1\154\77\0\1\155\77\0"+
    "\1\156\20\0\1\157\100\0\1\160\55\0\1\161\22\0"+
    "\1\162\13\0\21\20\3\0\2\20\1\0\5\20\3\0"+
    "\2\20\24\0\2\20\1\163\2\20\2\0\1\64\101\0"+
    "\1\164\73\0\1\67\2\0\75\67\7\0\1\165\100\0"+
    "\1\166\100\0\1\167\4\0\1\170\1\171\71\0\1\172"+
    "\76\0\1\173\104\0\1\174\76\0\1\175\1\0\1\176"+
    "\76\0\1\177\73\0\1\200\104\0\1\201\67\0\1\20"+
    "\1\202\17\20\3\0\2\20\1\0\5\20\3\0\2\20"+
    "\24\0\5\20\6\0\1\203\2\20\1\204\10\20\1\205"+
    "\4\20\3\0\2\20\1\0\5\20\3\0\2\20\24\0"+
    "\5\20\6\0\21\20\3\0\2\20\1\0\5\20\3\0"+
    "\2\20\24\0\3\20\1\206\1\20\6\0\2\20\1\207"+
    "\16\20\3\0\2\20\1\0\5\20\3\0\2\20\24\0"+
    "\5\20\6\0\7\20\1\210\11\20\3\0\2\20\1\0"+
    "\5\20\3\0\2\20\24\0\5\20\6\0\13\20\1\211"+
    "\5\20\3\0\2\20\1\0\5\20\3\0\2\20\24\0"+
    "\5\20\6\0\1\20\1\212\17\20\3\0\2\20\1\0"+
    "\5\20\3\0\2\20\24\0\5\20\6\0\7\20\1\213"+
    "\11\20\3\0\2\20\1\0\5\20\3\0\2\20\24\0"+
    "\5\20\6\0\4\20\1\214\14\20\3\0\2\20\1\0"+
    "\5\20\3\0\2\20\24\0\5\20\6\0\16\20\1\215"+
    "\2\20\3\0\2\20\1\0\5\20\3\0\2\20\24\0"+
    "\5\20\6\0\6\20\1\216\6\20\1\217\3\20\3\0"+
    "\2\20\1\0\5\20\3\0\2\20\24\0\5\20\6\0"+
    "\3\20\1\220\15\20\3\0\2\20\1\0\5\20\3\0"+
    "\2\20\24\0\5\20\6\0\4\20\1\221\14\20\3\0"+
    "\2\20\1\0\5\20\3\0\2\20\24\0\5\20\6\0"+
    "\21\20\3\0\2\20\1\0\5\20\3\0\2\20\24\0"+
    "\1\20\1\222\3\20\6\0\21\20\3\0\2\20\1\0"+
    "\3\20\1\223\1\20\3\0\2\20\24\0\5\20\6\0"+
    "\2\20\1\224\16\20\3\0\2\20\1\0\5\20\3\0"+
    "\2\20\24\0\5\20\6\0\1\20\1\225\17\20\3\0"+
    "\2\20\1\0\5\20\3\0\2\20\24\0\5\20\6\0"+
    "\10\20\1\226\10\20\3\0\2\20\1\0\5\20\3\0"+
    "\2\20\24\0\5\20\6\0\4\20\1\227\14\20\3\0"+
    "\2\20\1\0\5\20\3\0\2\20\24\0\5\20\32\0"+
    "\1\230\2\0\1\230\3\0\1\230\72\0\1\231\51\0"+
    "\1\232\1\0\1\232\2\0\2\232\6\0\1\232\6\0"+
    "\2\232\1\0\1\232\1\0\3\232\71\0\1\233\1\0"+
    "\1\233\3\0\1\233\44\0\2\20\1\234\16\20\3\0"+
    "\2\20\1\0\5\20\3\0\2\20\24\0\5\20\42\140"+
    "\1\235\1\142\34\140\44\0\1\236\33\0\2\143\1\0"+
    "\41\143\1\237\33\143\47\0\1\240\77\0\1\241\36\0"+
    "\7\20\1\242\11\20\3\0\2\20\1\0\5\20\3\0"+
    "\2\20\24\0\5\20\7\0\1\243\113\0\1\244\65\0"+
    "\1\245\101\0\1\246\73\0\1\247\116\0\1\250\65\0"+
    "\1\101\102\0\1\247\60\0\1\175\2\0\75\175\23\0"+
    "\1\251\72\0\1\247\67\0\1\252\104\0\1\253\72\0"+
    "\2\20\1\254\16\20\3\0\2\20\1\0\5\20\3\0"+
    "\2\20\24\0\5\20\6\0\4\20\1\255\14\20\3\0"+
    "\2\20\1\0\5\20\3\0\2\20\24\0\5\20\6\0"+
    "\13\20\1\256\5\20\3\0\2\20\1\0\5\20\3\0"+
    "\2\20\24\0\5\20\6\0\15\20\1\257\3\20\3\0"+
    "\2\20\1\0\5\20\3\0\2\20\24\0\5\20\6\0"+
    "\2\20\1\260\16\20\3\0\2\20\1\0\5\20\3\0"+
    "\2\20\24\0\5\20\6\0\2\20\1\261\16\20\3\0"+
    "\2\20\1\0\5\20\3\0\2\20\24\0\5\20\6\0"+
    "\4\20\1\262\14\20\3\0\2\20\1\0\5\20\3\0"+
    "\2\20\24\0\5\20\6\0\17\20\1\263\1\20\3\0"+
    "\2\20\1\0\5\20\3\0\2\20\24\0\5\20\6\0"+
    "\2\20\1\264\16\20\3\0\2\20\1\0\5\20\3\0"+
    "\2\20\24\0\5\20\6\0\4\20\1\265\14\20\3\0"+
    "\2\20\1\0\5\20\3\0\2\20\24\0\5\20\6\0"+
    "\13\20\1\266\5\20\3\0\2\20\1\0\5\20\3\0"+
    "\2\20\24\0\5\20\6\0\14\20\1\267\4\20\3\0"+
    "\2\20\1\0\5\20\3\0\2\20\24\0\5\20\6\0"+
    "\1\270\6\20\1\271\11\20\3\0\2\20\1\0\5\20"+
    "\3\0\2\20\24\0\5\20\6\0\11\20\1\272\7\20"+
    "\3\0\2\20\1\0\5\20\3\0\2\20\24\0\5\20"+
    "\6\0\21\20\3\0\2\20\1\0\5\20\3\0\2\20"+
    "\24\0\1\20\1\273\3\20\6\0\7\20\1\274\11\20"+
    "\3\0\2\20\1\0\5\20\3\0\2\20\24\0\5\20"+
    "\6\0\11\20\1\275\7\20\3\0\2\20\1\0\5\20"+
    "\3\0\2\20\24\0\5\20\6\0\3\20\1\276\15\20"+
    "\3\0\2\20\1\0\5\20\3\0\2\20\24\0\5\20"+
    "\6\0\2\20\1\277\16\20\3\0\2\20\1\0\5\20"+
    "\3\0\2\20\24\0\5\20\6\0\1\20\1\300\2\20"+
    "\1\301\14\20\3\0\2\20\1\0\5\20\3\0\2\20"+
    "\24\0\5\20\6\0\14\20\1\302\4\20\3\0\2\20"+
    "\1\0\5\20\3\0\2\20\24\0\5\20\13\0\1\230"+
    "\17\0\1\230\52\0\1\303\20\20\3\0\2\20\1\0"+
    "\5\20\3\0\2\20\24\0\5\20\6\0\11\20\1\304"+
    "\7\20\3\0\2\20\1\0\5\20\3\0\2\20\24\0"+
    "\5\20\10\0\1\305\101\0\1\306\107\0\1\307\72\0"+
    "\1\310\72\0\1\175\104\0\1\311\101\0\1\312\104\0"+
    "\1\313\63\0\1\314\75\0\3\20\1\315\15\20\3\0"+
    "\2\20\1\0\5\20\3\0\2\20\24\0\5\20\6\0"+
    "\2\20\1\316\4\20\1\317\11\20\3\0\2\20\1\0"+
    "\5\20\3\0\2\20\24\0\5\20\6\0\15\20\1\320"+
    "\3\20\3\0\2\20\1\0\5\20\3\0\2\20\24\0"+
    "\5\20\6\0\21\20\3\0\2\20\1\0\5\20\3\0"+
    "\2\20\24\0\1\321\4\20\6\0\14\20\1\322\4\20"+
    "\3\0\2\20\1\0\5\20\3\0\2\20\24\0\5\20"+
    "\6\0\12\20\1\323\6\20\3\0\2\20\1\0\5\20"+
    "\3\0\2\20\24\0\5\20\6\0\15\20\1\324\3\20"+
    "\3\0\2\20\1\0\5\20\3\0\2\20\24\0\5\20"+
    "\6\0\3\20\1\325\15\20\3\0\2\20\1\0\5\20"+
    "\3\0\2\20\24\0\5\20\6\0\6\20\1\326\12\20"+
    "\3\0\2\20\1\0\5\20\3\0\2\20\24\0\5\20"+
    "\6\0\13\20\1\327\5\20\3\0\2\20\1\0\5\20"+
    "\3\0\2\20\24\0\5\20\6\0\10\20\1\330\10\20"+
    "\3\0\2\20\1\0\5\20\3\0\2\20\24\0\5\20"+
    "\6\0\1\331\20\20\3\0\2\20\1\0\5\20\3\0"+
    "\2\20\24\0\5\20\6\0\21\20\3\0\2\20\1\0"+
    "\5\20\3\0\2\20\24\0\4\20\1\332\6\0\7\20"+
    "\1\333\11\20\3\0\2\20\1\0\5\20\3\0\2\20"+
    "\24\0\5\20\6\0\1\334\20\20\3\0\2\20\1\0"+
    "\5\20\3\0\2\20\24\0\5\20\6\0\4\20\1\335"+
    "\14\20\3\0\2\20\1\0\5\20\3\0\2\20\24\0"+
    "\5\20\6\0\7\20\1\336\11\20\3\0\2\20\1\0"+
    "\5\20\3\0\2\20\24\0\5\20\6\0\21\20\3\0"+
    "\2\20\1\0\5\20\3\0\2\20\24\0\1\337\4\20"+
    "\6\0\2\20\1\340\16\20\3\0\2\20\1\0\5\20"+
    "\3\0\2\20\24\0\5\20\11\0\1\341\103\0\1\342"+
    "\73\0\1\175\102\0\1\175\1\0\1\343\77\0\1\176"+
    "\102\0\1\344\103\0\1\345\66\0\1\175\71\0\4\20"+
    "\1\346\14\20\3\0\2\20\1\0\5\20\3\0\2\20"+
    "\24\0\5\20\6\0\15\20\1\347\3\20\3\0\2\20"+
    "\1\0\5\20\3\0\2\20\24\0\5\20\6\0\4\20"+
    "\1\350\14\20\3\0\2\20\1\0\5\20\3\0\2\20"+
    "\24\0\5\20\6\0\6\20\1\351\12\20\3\0\2\20"+
    "\1\0\5\20\3\0\2\20\24\0\5\20\6\0\21\20"+
    "\3\0\2\20\1\0\5\20\3\0\2\20\24\0\2\20"+
    "\1\352\2\20\6\0\10\20\1\353\10\20\3\0\2\20"+
    "\1\0\5\20\3\0\2\20\24\0\5\20\6\0\11\20"+
    "\1\354\7\20\3\0\2\20\1\0\5\20\3\0\2\20"+
    "\24\0\5\20\6\0\2\20\1\355\16\20\3\0\2\20"+
    "\1\0\5\20\3\0\2\20\24\0\5\20\6\0\3\20"+
    "\1\356\15\20\3\0\2\20\1\0\5\20\3\0\2\20"+
    "\24\0\5\20\6\0\2\20\1\357\16\20\3\0\2\20"+
    "\1\0\5\20\3\0\2\20\24\0\5\20\6\0\15\20"+
    "\1\360\3\20\3\0\2\20\1\0\5\20\3\0\2\20"+
    "\24\0\5\20\6\0\4\20\1\361\14\20\3\0\2\20"+
    "\1\0\5\20\3\0\2\20\24\0\5\20\6\0\10\20"+
    "\1\362\10\20\3\0\2\20\1\0\5\20\3\0\2\20"+
    "\24\0\5\20\12\0\1\175\107\0\1\363\75\0\1\364"+
    "\72\0\1\247\72\0\1\175\77\0\4\20\1\365\14\20"+
    "\3\0\2\20\1\0\5\20\3\0\2\20\24\0\5\20"+
    "\6\0\5\20\1\366\13\20\3\0\2\20\1\0\5\20"+
    "\3\0\2\20\24\0\5\20\6\0\5\20\1\367\13\20"+
    "\3\0\2\20\1\0\5\20\3\0\2\20\24\0\5\20"+
    "\6\0\14\20\1\370\4\20\3\0\2\20\1\0\5\20"+
    "\3\0\2\20\24\0\5\20\6\0\13\20\1\371\5\20"+
    "\3\0\2\20\1\0\5\20\3\0\2\20\24\0\5\20"+
    "\16\0\1\175\102\0\1\341\64\0\3\20\1\372\15\20"+
    "\3\0\2\20\1\0\5\20\3\0\2\20\24\0\5\20"+
    "\6\0\2\20\1\373\16\20\3\0\2\20\1\0\5\20"+
    "\3\0\2\20\24\0\5\20";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11648];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\23\1\1\11\11\1\2\11\5\1\10\11"+
    "\4\1\1\11\3\1\2\11\12\0\25\1\2\11\4\0"+
    "\1\1\1\0\1\11\3\0\12\11\1\1\1\0\2\11"+
    "\1\1\1\11\10\0\1\1\4\0\27\1\1\11\4\1"+
    "\1\11\1\1\2\11\1\1\11\0\31\1\10\0\24\1"+
    "\5\0\15\1\2\0\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _SourcePawnLexer() {
    this((java.io.Reader)null);
  }


  public _SourcePawnLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _SourcePawnLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { return IDENTIFIER;
          }
        case 88: break;
        case 18: 
          { return LPAREN;
          }
        case 89: break;
        case 28: 
          { return AND;
          }
        case 90: break;
        case 82: 
          { return PUBLIC_KEYWORD;
          }
        case 91: break;
        case 44: 
          { return OROR;
          }
        case 92: break;
        case 23: 
          { return RBRACKET;
          }
        case 93: break;
        case 85: 
          { return FORWARD_KEYWORD;
          }
        case 94: break;
        case 7: 
          { return COLON;
          }
        case 95: break;
        case 32: 
          { yybegin(IN_COMMENT); return BLOCK_COMMENT;
          }
        case 96: break;
        case 83: 
          { return DEFAULT_KEYWORD;
          }
        case 97: break;
        case 36: 
          { return MINUSEQ;
          }
        case 98: break;
        case 9: 
          { return EQ;
          }
        case 99: break;
        case 60: 
          { return LTLTEQ;
          }
        case 100: break;
        case 55: 
          { return FLOAT_LITERAL;
          }
        case 101: break;
        case 62: 
          { return ENUM_KEYWORD;
          }
        case 102: break;
        case 86: 
          { return OPERATOR_KEYWORD;
          }
        case 103: break;
        case 54: 
          { return NEW_KEYWORD;
          }
        case 104: break;
        case 77: 
          { return STRUCT_KEYWORD;
          }
        case 105: break;
        case 58: 
          { return BINARY_LITERAL;
          }
        case 106: break;
        case 72: 
          { return CONST_KEYWORD;
          }
        case 107: break;
        case 66: 
          { return CASE_KEYWORD;
          }
        case 108: break;
        case 41: 
          { return PLUSPLUS;
          }
        case 109: break;
        case 70: 
          { return SLEEP_KEYWORD;
          }
        case 110: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 111: break;
        case 76: 
          { return STATIC_KEYWORD;
          }
        case 112: break;
        case 22: 
          { return LBRACKET;
          }
        case 113: break;
        case 24: 
          { return SEMICOLON;
          }
        case 114: break;
        case 79: 
          { return SWITCH_KEYWORD;
          }
        case 115: break;
        case 25: 
          { return COMMA;
          }
        case 116: break;
        case 16: 
          { return XOR;
          }
        case 117: break;
        case 3: 
          { return DIV;
          }
        case 118: break;
        case 13: 
          { return PLUS;
          }
        case 119: break;
        case 35: 
          { return MINUSMINUS;
          }
        case 120: break;
        case 45: 
          { return XOREQ;
          }
        case 121: break;
        case 40: 
          { return PLUSEQ;
          }
        case 122: break;
        case 38: 
          { return EQEQ;
          }
        case 123: break;
        case 37: 
          { return STRING_LITERAL;
          }
        case 124: break;
        case 26: 
          { return LT;
          }
        case 125: break;
        case 46: 
          { return PERCEQ;
          }
        case 126: break;
        case 81: 
          { return NATIVE_KEYWORD;
          }
        case 127: break;
        case 14: 
          { return ASTERISK;
          }
        case 128: break;
        case 48: 
          { return LTLT;
          }
        case 129: break;
        case 10: 
          { return EXCL;
          }
        case 130: break;
        case 31: 
          { return DIVEQ;
          }
        case 131: break;
        case 8: 
          { return DOT;
          }
        case 132: break;
        case 73: 
          { return BREAK_KEYWORD;
          }
        case 133: break;
        case 53: 
          { return FOR_KEYWORD;
          }
        case 134: break;
        case 64: 
          { return EXIT_KEYWORD;
          }
        case 135: break;
        case 43: 
          { return OREQ;
          }
        case 136: break;
        case 21: 
          { return RBRACE;
          }
        case 137: break;
        case 33: 
          { return DO_KEYWORD;
          }
        case 138: break;
        case 69: 
          { return STOCK_KEYWORD;
          }
        case 139: break;
        case 27: 
          { return GT;
          }
        case 140: break;
        case 63: 
          { return ELSE_KEYWORD;
          }
        case 141: break;
        case 49: 
          { return ANDEQ;
          }
        case 142: break;
        case 84: 
          { return DEFINED_KEYWORD;
          }
        case 143: break;
        case 30: 
          { return LINE_COMMENT;
          }
        case 144: break;
        case 42: 
          { return ASTERISKEQ;
          }
        case 145: break;
        case 15: 
          { return OR;
          }
        case 146: break;
        case 6: 
          { return INTEGER_LITERAL;
          }
        case 147: break;
        case 75: 
          { return ASSERT_KEYWORD;
          }
        case 148: break;
        case 51: 
          { yybegin(YYINITIAL);
          }
        case 149: break;
        case 20: 
          { return LBRACE;
          }
        case 150: break;
        case 68: 
          { return STATE_KEYWORD;
          }
        case 151: break;
        case 11: 
          { return TILDE;
          }
        case 152: break;
        case 56: 
          { return ELLIPSIS;
          }
        case 153: break;
        case 34: 
          { return IF_KEYWORD;
          }
        case 154: break;
        case 71: 
          { return TAGOF_KEYWORD;
          }
        case 155: break;
        case 74: 
          { return WHILE_KEYWORD;
          }
        case 156: break;
        case 39: 
          { return NE;
          }
        case 157: break;
        case 59: 
          { return CHARACTER_LITERAL;
          }
        case 158: break;
        case 67: 
          { return GOTO_KEYWORD;
          }
        case 159: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 160: break;
        case 87: 
          { return CONTINUE_KEYWORD;
          }
        case 161: break;
        case 80: 
          { return RETURN_KEYWORD;
          }
        case 162: break;
        case 5: 
          { return MINUS;
          }
        case 163: break;
        case 47: 
          { return LE;
          }
        case 164: break;
        case 19: 
          { return RPAREN;
          }
        case 165: break;
        case 12: 
          { return QUEST;
          }
        case 166: break;
        case 17: 
          { return PERC;
          }
        case 167: break;
        case 78: 
          { return SIZEOF_KEYWORD;
          }
        case 168: break;
        case 50: 
          { return ANDAND;
          }
        case 169: break;
        case 65: 
          { return DECL_KEYWORD;
          }
        case 170: break;
        case 57: 
          { return HEX_LITERAL;
          }
        case 171: break;
        case 61: 
          { return GTGTEQ;
          }
        case 172: break;
        case 52: 
          { return PREPROCESSOR_COMMENT;
          }
        case 173: break;
        case 29: 
          { 
          }
        case 174: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
