
{
  parserClass="org.idea_sp.parser.SourcePawnParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="SourcePawn"
  psiImplClassSuffix="Impl"
  psiPackage="org.idea_sp.psi"
  psiImplPackage="org.idea_sp.psi.impl"

  elementTypeHolderClass="org.idea_sp.psi.SourcePawnTypes"
  elementTypeClass="org.idea_sp.psi.SourcePawnElementType"
  tokenTypeClass="org.idea_sp.psi.SourcePawnTokenType"

  tokens = [
    EQ="="
    EXCL="!"
    TILDE="~"
    QUEST="?"
    COLON=":"
    PLUS="+"
    MINUS="-"
    ASTERISK="*"
    DIV="/"
    OR="|"
    XOR="^"
    PERC="%"
    LPAREN="("
    RPAREN=")"
    LBRACE="{"
    RBRACE="}"
    LBRACKET="["
    RBRACKET="]"
    SEMICOLON=";"
    COMMA=","
    ELLIPSIS="..."
    DOT="."
    EQEQ="=="
    NE="!="
    OROR="||"
    PLUSPLUS="++"
    MINUSMINUS="--"
    LT="<"
    LE="<="
    LTLT="<<"
    GT=">"
    AND="&"
    ANDAND="&&"
    PLUSEQ="+="
    MINUSEQ="-="
    ASTERISKEQ="*="
    DIVEQ="/="
    ANDEQ="&="
    OREQ="|="
    XOREQ="^="
    PERCEQ="%="
    LTLTEQ="<<="
    GTGTEQ=">>="

    ASSERT_KEYWORD="assert"
    BREAK_KEYWORD="break"
    CASE_KEYWORD="case"
    CONTINUE_KEYWORD="continue"
    DEFAULT_KEYWORD="default"
    DO_KEYWORD="do"
    ELSE_KEYWORD="else"
    EXIT_KEYWORD="exit"
    FOR_KEYWORD="for"
    GOTO_KEYWORD="goto"
    IF_KEYWORD="if"
    RETURN_KEYWORD="return"
    SLEEP_KEYWORD="sleep"
    STATE_KEYWORD="state"
    SWITCH_KEYWORD="switch"
    WHILE_KEYWORD="while"

    DEFINED_KEYWORD="defined"
    SIZEOF_KEYWORD="sizeof"
    STATE_KEYWORD="state"
    TAGOF_KEYWORD="tagof"

    CONST_KEYWORD="const"
    FORWARD_KEYWORD="forward"
    NATIVE_KEYWORD="native"
    NEW_KEYWORD="new"
    OPERATOR_KEYWORD="operator"
    PUBLIC_KEYWORD="public"
    STATIC_KEYWORD="static"
    STOCK_KEYWORD="stock"

    DECL_KEYWORD="decl"
    NEW_KEYWORD="new"
    PUBLIC_KEYWORD="public"

    // SourcePawn-specific keywords
    ENUM_KEYWORD="enum"
    STRUCT_KEYWORD="struct"

    // TODO: remove me (for live preview purposes only)
    SPACE="regexp:[\ \n\r\t\f]"

    line_comment="regexp://[^\r\n]*"
    block_comment="regexp:/\*(.|\n)*?\*/"
    preprocessor_comment="regexp:#(assert|define|else|elseif|endif|endinput|error|file|if|include|line|pragma|section|tryinclude|undef)[^\r\n]*"

    integer_literal="regexp:[-+]?\d[_\d]*"
    float_literal="regexp:[-+]?\d[_\d]*\.\d[_\d]*"
    hex_literal="regexp:[-+]?0x[a-fA-F0-9_]+"
    binary_literal="regexp:[-+]?0b[01_]+"

    string_literal="regexp:\"(\\.|[^\"])*\""
    character_literal="regexp:'(\\.|[^\"])'"

    // @ and _ are not themselves valid identifiers.
    identifier="regexp:([@_a-zA-Z][@_a-zA-Z0-9]+|[a-zA-Z][@_a-zA-Z0-9]*)"
  ]
}


root ::= root_item *
private root_item ::=
    top_level_statement


top_level_statement ::= top_level_statement_item SEMICOLON

top_level_statement_item ::=
    enum_declaration
  | global_declaration
  | forward_declaration
  | native_declaration
//  | func_def


global_declaration ::= global_storage_type CONST_KEYWORD? tagged_identifier (ASSIGN_OP initializer)?

// Enums
enum_declaration ::= ENUM_KEYWORD identifier COLON? enum_declaration_list
enum_declaration_list ::= LBRACE enum_declaration_list_item (COMMA (enum_declaration_list_item | &RBRACE))* RBRACE {pin(".*")=1}
enum_declaration_list_item ::= tagged_identifier (ASSIGN_OP literal)? {pin=1}

// Forwards
forward_declaration ::= FORWARD_KEYWORD tagged_identifier func_proto

// Natives
native_declaration ::= NATIVE_KEYWORD tagged_identifier func_proto


func_proto ::= LPAREN argdef (COMMA (argdef | &RPAREN))* RPAREN {pin(".*")=1}
argdef ::= (CONST_KEYWORD | AND)? tagged_identifier array_dims? argdef_default? {pin=2}
argdef_default ::= ASSIGN_OP simple_expression
array_dims ::= LBRACKET number? RBRACKET


statement ::=
    block_statement
  | single_statement

block_statement ::= LBRACE statement* RBRACE
single_statement ::= expression SEMICOLON

expression ::=
    decl_expr
  | new_expr
  | complex_expression

complex_expression ::=
    simple_expression
  | assign_expr

simple_expression ::=
    literal
  | tagged_identifier

decl_expr ::= DECL_KEYWORD identifier
new_expr ::= local_storage_type identifier (ASSIGN_OP expression)?
assign_expr ::= identifier any_assign_op expression


initializer ::=
    struct_initializer
  | simple_expression


// Complicated because it allows for trailing commas
struct_initializer ::= LBRACE struct_initializer_item (COMMA (struct_initializer_item | &RBRACE))* RBRACE {pin(".*")=1}
struct_initializer_item ::= identifier ASSIGN_OP initializer


tag ::= identifier
tagged_identifier ::= (tag COLON)? identifier


literal ::=
    string_literal
  | character_literal
  | number


number ::=
    integer_literal
  | float_literal
  | hex_literal
  | binary_literal


any_assign_op ::= (ASSIGN_OP | AUGMENTED_ASSIGN_OP)
ASSIGN_OP ::= EQ
AUGMENTED_ASSIGN_OP ::= (
    PLUSEQ
  | MINUSEQ
  | ASTERISKEQ
  | DIVEQ
  | ANDEQ
)


global_storage_type ::= (
    PUBLIC_KEYWORD
  | STOCK_KEYWORD
  | NEW_KEYWORD
  | STATIC_KEYWORD
)

local_storage_type ::= (
    NEW_KEYWORD
  | STATIC_KEYWORD
)

// TODO: remove me (for live preview purposes only)
external space ::= SPACE
