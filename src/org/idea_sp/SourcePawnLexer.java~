/* The following code was generated by JFlex 1.4.3 on 3/7/15 10:14 AM */


package org.idea_sp;
 
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.idea_sp.psi.SourcePawnTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/7/15 10:14 AM from the specification file
 * <tt>/Users/they4kman/programming/idea-sp/src/org/idea_sp/SourcePawn.flex</tt>
 */
class SourcePawnLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\3\1\1\1\6\1\0\1\1\1\6\16\3\4\0\1\1\1\42"+
    "\1\21\1\7\1\2\1\52\1\66\1\17\1\54\1\55\1\5\1\46"+
    "\1\63\1\47\1\16\1\4\1\13\11\10\1\45\1\62\1\64\1\41"+
    "\1\65\1\44\1\53\1\12\1\15\3\12\1\22\14\2\1\27\4\2"+
    "\1\14\2\2\1\60\1\20\1\61\1\51\1\11\1\0\1\25\1\34"+
    "\2\12\1\36\1\37\1\33\1\2\1\31\2\2\1\23\1\2\1\32"+
    "\1\24\2\2\1\30\1\40\1\26\1\35\2\2\1\14\2\2\1\56"+
    "\1\50\1\57\1\43\41\3\2\0\4\2\4\0\1\2\2\0\1\3"+
    "\7\0\1\2\4\0\1\2\5\0\27\2\1\0\37\2\1\0\u013f\2"+
    "\31\0\162\2\4\0\14\2\16\0\5\2\11\0\1\2\21\0\130\3"+
    "\5\0\23\3\12\0\1\2\13\0\1\2\1\0\3\2\1\0\1\2"+
    "\1\0\24\2\1\0\54\2\1\0\46\2\1\0\5\2\4\0\202\2"+
    "\1\0\4\3\3\0\105\2\1\0\46\2\2\0\2\2\6\0\20\2"+
    "\41\0\46\2\2\0\1\2\7\0\47\2\11\0\21\3\1\0\27\3"+
    "\1\0\3\3\1\0\1\3\1\0\2\3\1\0\1\3\13\0\33\2"+
    "\5\0\3\2\15\0\4\3\14\0\6\3\13\0\32\2\5\0\13\2"+
    "\16\3\7\0\12\3\4\0\2\2\1\3\143\2\1\0\1\2\10\3"+
    "\1\0\6\3\2\2\2\3\1\0\4\3\2\2\12\3\3\2\2\0"+
    "\1\2\17\0\1\3\1\2\1\3\36\2\33\3\2\0\3\2\60\0"+
    "\46\2\13\3\1\2\u014f\0\3\3\66\2\2\0\1\3\1\2\20\3"+
    "\2\0\1\2\4\3\3\0\12\2\2\3\2\0\12\3\21\0\3\3"+
    "\1\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\1\2"+
    "\3\0\4\2\2\0\1\3\1\2\7\3\2\0\2\3\2\0\3\3"+
    "\11\0\1\3\4\0\2\2\1\0\3\2\2\3\2\0\12\3\4\2"+
    "\15\0\3\3\1\0\6\2\4\0\2\2\2\0\26\2\1\0\7\2"+
    "\1\0\2\2\1\0\2\2\1\0\2\2\2\0\1\3\1\0\5\3"+
    "\4\0\2\3\2\0\3\3\13\0\4\2\1\0\1\2\7\0\14\3"+
    "\3\2\14\0\3\3\1\0\11\2\1\0\3\2\1\0\26\2\1\0"+
    "\7\2\1\0\2\2\1\0\5\2\2\0\1\3\1\2\10\3\1\0"+
    "\3\3\1\0\3\3\2\0\1\2\17\0\2\2\2\3\2\0\12\3"+
    "\1\0\1\2\17\0\3\3\1\0\10\2\2\0\2\2\2\0\26\2"+
    "\1\0\7\2\1\0\2\2\1\0\5\2\2\0\1\3\1\2\6\3"+
    "\3\0\2\3\2\0\3\3\10\0\2\3\4\0\2\2\1\0\3\2"+
    "\4\0\12\3\1\0\1\2\20\0\1\3\1\2\1\0\6\2\3\0"+
    "\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1\0\2\2\3\0"+
    "\2\2\3\0\3\2\3\0\10\2\1\0\3\2\4\0\5\3\3\0"+
    "\3\3\1\0\4\3\11\0\1\3\17\0\11\3\11\0\1\2\7\0"+
    "\3\3\1\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2\1\0"+
    "\5\2\4\0\7\3\1\0\3\3\1\0\4\3\7\0\2\3\11\0"+
    "\2\2\4\0\12\3\22\0\2\3\1\0\10\2\1\0\3\2\1\0"+
    "\27\2\1\0\12\2\1\0\5\2\2\0\1\3\1\2\7\3\1\0"+
    "\3\3\1\0\4\3\7\0\2\3\7\0\1\2\1\0\2\2\4\0"+
    "\12\3\22\0\2\3\1\0\10\2\1\0\3\2\1\0\27\2\1\0"+
    "\20\2\4\0\6\3\2\0\3\3\1\0\4\3\11\0\1\3\10\0"+
    "\2\2\4\0\12\3\22\0\2\3\1\0\22\2\3\0\30\2\1\0"+
    "\11\2\1\0\1\2\2\0\7\2\3\0\1\3\4\0\6\3\1\0"+
    "\1\3\1\0\10\3\22\0\2\3\15\0\60\2\1\3\2\2\7\3"+
    "\4\0\10\2\10\3\1\0\12\3\47\0\2\2\1\0\1\2\2\0"+
    "\2\2\1\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0"+
    "\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\3"+
    "\2\2\6\3\1\0\2\3\1\2\2\0\5\2\1\0\1\2\1\0"+
    "\6\3\2\0\12\3\2\0\2\2\42\0\1\2\27\0\2\3\6\0"+
    "\12\3\13\0\1\3\1\0\1\3\1\0\1\3\4\0\2\3\10\2"+
    "\1\0\42\2\6\0\24\3\1\0\2\3\4\2\4\0\10\3\1\0"+
    "\44\3\11\0\1\3\71\0\42\2\1\0\5\2\1\0\2\2\1\0"+
    "\7\3\3\0\4\3\6\0\12\3\6\0\6\2\4\3\106\0\46\2"+
    "\12\0\51\2\7\0\132\2\5\0\104\2\5\0\122\2\6\0\7\2"+
    "\1\0\77\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\1\2"+
    "\1\0\4\2\2\0\47\2\1\0\1\2\1\0\4\2\2\0\37\2"+
    "\1\0\1\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2"+
    "\2\0\7\2\1\0\7\2\1\0\27\2\1\0\37\2\1\0\1\2"+
    "\1\0\4\2\2\0\7\2\1\0\47\2\1\0\23\2\16\0\11\3"+
    "\56\0\125\2\14\0\u026c\2\2\0\10\2\12\0\32\2\5\0\113\2"+
    "\3\0\3\2\17\0\15\2\1\0\4\2\3\3\13\0\22\2\3\3"+
    "\13\0\22\2\2\3\14\0\15\2\1\0\3\2\1\0\2\3\14\0"+
    "\64\2\40\3\3\0\1\2\3\0\2\2\1\3\2\0\12\3\41\0"+
    "\3\3\2\0\12\3\6\0\130\2\10\0\51\2\1\3\126\0\35\2"+
    "\3\0\14\3\4\0\14\3\12\0\12\3\36\2\2\0\5\2\u038b\0"+
    "\154\2\224\0\234\2\4\0\132\2\6\0\26\2\2\0\6\2\2\0"+
    "\46\2\2\0\6\2\2\0\10\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\37\2\2\0\65\2\1\0\7\2\1\0\1\2\3\0"+
    "\3\2\1\0\7\2\3\0\4\2\2\0\6\2\4\0\15\2\5\0"+
    "\3\2\1\0\7\2\17\0\4\3\32\0\5\3\20\0\2\2\23\0"+
    "\1\2\13\0\4\3\6\0\6\3\1\0\1\2\15\0\1\2\40\0"+
    "\22\2\36\0\15\3\4\0\1\3\3\0\6\3\27\0\1\2\4\0"+
    "\1\2\2\0\12\2\1\0\1\2\3\0\5\2\6\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\4\2\1\0\3\2\1\0\7\2\3\0"+
    "\3\2\5\0\5\2\26\0\44\2\u0e81\0\3\2\31\0\11\2\6\3"+
    "\1\0\5\2\2\0\5\2\4\0\126\2\2\0\2\3\2\0\3\2"+
    "\1\0\137\2\5\0\50\2\4\0\136\2\21\0\30\2\70\0\20\2"+
    "\u0200\0\u19b6\2\112\0\u51a6\2\132\0\u048d\2\u0773\0\u2ba4\2\u215c\0\u012e\2"+
    "\2\0\73\2\225\0\7\2\14\0\5\2\5\0\1\2\1\3\12\2"+
    "\1\0\15\2\1\0\5\2\1\0\1\2\1\0\2\2\1\0\2\2"+
    "\1\0\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2\50\0\15\2"+
    "\3\0\20\3\20\0\4\3\17\0\2\2\30\0\3\2\31\0\1\2"+
    "\6\0\5\2\1\0\207\2\2\0\1\3\4\0\1\2\13\0\12\3"+
    "\7\0\32\2\4\0\1\2\1\0\32\2\12\0\132\2\3\0\6\2"+
    "\2\0\6\2\2\0\6\2\2\0\3\2\3\0\2\2\3\0\2\2"+
    "\22\0\3\3\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\6\1\10\1\11\1\12\6\2\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\2\6\1\0\2\11\2\12\6\2\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\2\0\1\61\1\62\1\42\1\63\6\2\1\64\1\65"+
    "\1\0\1\2\1\66\1\2\1\67\1\70\1\2\1\42"+
    "\1\71\1\2\1\72\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\156"+
    "\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302"+
    "\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u0415\0\u0415\0\u044c"+
    "\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u0415\0\u0415\0\u0415\0\u0415"+
    "\0\u0415\0\u0415\0\u0415\0\u0415\0\u0415\0\u055f\0\u0596\0\u05cd"+
    "\0\u0604\0\u063b\0\u0415\0\u0415\0\u0672\0\u06a9\0\u06e0\0\u0717"+
    "\0\u0415\0\u074e\0\u0785\0\u0415\0\u07bc\0\u07f3\0\u082a\0\u0861"+
    "\0\u0898\0\u08cf\0\u0415\0\u0415\0\u0415\0\u0415\0\u0415\0\u0415"+
    "\0\u0415\0\u0415\0\u0415\0\u0415\0\u0415\0\u0906\0\u093d\0\u0415"+
    "\0\u0415\0\u0974\0\u0415\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87"+
    "\0\u0abe\0\u0415\0\u0415\0\u0af5\0\u0b2c\0\156\0\u0b63\0\156"+
    "\0\156\0\u0b9a\0\u0415\0\156\0\u0bd1\0\156\0\156";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\0\1\4\1\5\1\2\1\6"+
    "\1\7\1\10\1\3\1\11\2\3\1\12\1\13\1\0"+
    "\1\14\1\15\3\3\1\16\1\17\2\3\1\20\1\3"+
    "\1\21\2\3\1\22\1\3\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\0\1\2\4\0\1\2\62\0\2\3"+
    "\4\0\6\3\4\0\17\3\32\0\1\51\1\52\33\0"+
    "\1\53\66\0\1\54\25\0\6\6\1\0\60\6\10\0"+
    "\2\7\1\0\1\7\2\0\1\55\60\0\2\7\1\0"+
    "\1\7\1\56\1\57\1\55\15\0\1\57\42\0\1\55"+
    "\2\0\1\55\2\0\1\60\50\0\6\13\1\0\10\13"+
    "\1\61\1\62\46\13\6\14\1\0\11\14\1\63\1\64"+
    "\45\14\2\0\2\3\4\0\6\3\4\0\1\3\1\65"+
    "\15\3\30\0\2\3\4\0\6\3\4\0\6\3\1\66"+
    "\10\3\30\0\2\3\4\0\6\3\4\0\4\3\1\67"+
    "\12\3\30\0\2\3\4\0\6\3\4\0\13\3\1\70"+
    "\3\3\30\0\2\3\4\0\6\3\4\0\2\3\1\71"+
    "\14\3\30\0\2\3\4\0\6\3\4\0\3\3\1\72"+
    "\13\3\67\0\1\73\66\0\1\74\155\0\1\75\4\0"+
    "\1\76\61\0\1\77\5\0\1\100\60\0\1\101\6\0"+
    "\1\102\57\0\1\103\66\0\1\104\66\0\1\105\22\0"+
    "\1\106\67\0\1\107\42\0\1\110\24\0\1\111\6\51"+
    "\1\0\60\51\5\112\1\0\61\112\10\0\2\55\1\0"+
    "\1\55\63\0\4\56\1\0\1\56\4\0\1\56\2\0"+
    "\1\56\6\0\1\56\1\0\2\56\37\0\2\57\1\0"+
    "\1\57\71\0\1\113\50\0\6\13\1\0\60\13\6\14"+
    "\1\0\60\14\2\0\2\3\4\0\6\3\4\0\2\3"+
    "\1\114\14\3\30\0\2\3\4\0\6\3\4\0\13\3"+
    "\1\115\3\3\30\0\2\3\4\0\6\3\4\0\6\3"+
    "\1\116\10\3\30\0\2\3\4\0\6\3\4\0\1\3"+
    "\1\117\15\3\30\0\2\3\4\0\6\3\4\0\2\3"+
    "\1\120\14\3\30\0\2\3\4\0\6\3\4\0\1\3"+
    "\1\121\15\3\67\0\1\122\66\0\1\123\25\0\5\112"+
    "\1\124\61\112\2\0\2\3\4\0\6\3\4\0\3\3"+
    "\1\125\13\3\30\0\2\3\4\0\6\3\4\0\14\3"+
    "\1\126\2\3\30\0\2\3\4\0\6\3\4\0\7\3"+
    "\1\127\7\3\30\0\2\3\4\0\6\3\4\0\1\3"+
    "\1\130\15\3\30\0\2\3\4\0\6\3\4\0\1\3"+
    "\1\131\15\3\30\0\2\3\4\0\6\3\4\0\16\3"+
    "\1\132\26\0\4\112\1\133\1\124\61\112\2\0\2\3"+
    "\4\0\6\3\4\0\4\3\1\134\12\3\30\0\2\3"+
    "\4\0\6\3\4\0\10\3\1\135\6\3\30\0\2\3"+
    "\4\0\6\3\4\0\14\3\1\136\2\3\30\0\2\3"+
    "\4\0\6\3\4\0\11\3\1\137\5\3\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3080];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\23\1\3\11\5\1\11\11\5\1\2\11\3\1"+
    "\1\0\1\11\2\1\1\11\6\1\13\11\2\0\2\11"+
    "\1\1\1\11\6\1\2\11\1\0\6\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


  SourcePawnLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  SourcePawnLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1766) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return SourcePawnTypes.WHITE_SPACE;
          }
        case 60: break;
        case 21: 
          { return SourcePawnTypes.AT;
          }
        case 61: break;
        case 18: 
          { return SourcePawnTypes.OR;
          }
        case 62: break;
        case 42: 
          { return SourcePawnTypes.MINUSEQ;
          }
        case 63: break;
        case 55: 
          { return SourcePawnTypes.NULL_KEYWORD;
          }
        case 64: break;
        case 19: 
          { return SourcePawnTypes.XOR;
          }
        case 65: break;
        case 52: 
          { return SourcePawnTypes.LTLTEQ;
          }
        case 66: break;
        case 54: 
          { return SourcePawnTypes.TRUE_KEYWORD;
          }
        case 67: break;
        case 40: 
          { return SourcePawnTypes.PLUSEQ;
          }
        case 68: break;
        case 38: 
          { return SourcePawnTypes.EQEQ;
          }
        case 69: break;
        case 29: 
          { return SourcePawnTypes.COMMA;
          }
        case 70: break;
        case 58: 
          { return SourcePawnTypes.FALSE_KEYWORD;
          }
        case 71: break;
        case 36: 
          { return SourcePawnTypes.ASTERISKEQ;
          }
        case 72: break;
        case 22: 
          { return SourcePawnTypes.LPAREN;
          }
        case 73: break;
        case 8: 
          { return SourcePawnTypes.DOT;
          }
        case 74: break;
        case 23: 
          { return SourcePawnTypes.RPAREN;
          }
        case 75: break;
        case 51: 
          { return SourcePawnTypes.ELLIPSIS;
          }
        case 76: break;
        case 20: 
          { return SourcePawnTypes.PERC;
          }
        case 77: break;
        case 3: 
          { return SourcePawnTypes.DIV;
          }
        case 78: break;
        case 31: 
          { return SourcePawnTypes.GT;
          }
        case 79: break;
        case 10: 
          { return SourcePawnTypes.STRING_LITERAL;
          }
        case 80: break;
        case 15: 
          { return SourcePawnTypes.COLON;
          }
        case 81: break;
        case 59: 
          { return SourcePawnTypes.STRING_TYPE;
          }
        case 82: break;
        case 45: 
          { return SourcePawnTypes.OROR;
          }
        case 83: break;
        case 9: 
          { return SourcePawnTypes.CHARACTER_LITERAL;
          }
        case 84: break;
        case 2: 
          { return SourcePawnTypes.IDENTIFIER;
          }
        case 85: break;
        case 27: 
          { return SourcePawnTypes.RBRACKET;
          }
        case 86: break;
        case 32: 
          { return SourcePawnTypes.AND;
          }
        case 87: break;
        case 39: 
          { return SourcePawnTypes.NE;
          }
        case 88: break;
        case 6: 
          { return SourcePawnTypes.INTEGER_LITERAL;
          }
        case 89: break;
        case 49: 
          { return SourcePawnTypes.ANDEQ;
          }
        case 90: break;
        case 33: 
          { return SourcePawnTypes.END_OF_LINE_COMMENT;
          }
        case 91: break;
        case 53: 
          { return SourcePawnTypes.GTGTEQ;
          }
        case 92: break;
        case 11: 
          { return SourcePawnTypes.EQ;
          }
        case 93: break;
        case 24: 
          { return SourcePawnTypes.LBRACE;
          }
        case 94: break;
        case 7: 
          { return SourcePawnTypes.CELL_TAG;
          }
        case 95: break;
        case 5: 
          { return SourcePawnTypes.PREPROCESSOR_COMMENT;
          }
        case 96: break;
        case 25: 
          { return SourcePawnTypes.RBRACE;
          }
        case 97: break;
        case 16: 
          { return SourcePawnTypes.PLUS;
          }
        case 98: break;
        case 50: 
          { return SourcePawnTypes.ANDAND;
          }
        case 99: break;
        case 48: 
          { return SourcePawnTypes.LE;
          }
        case 100: break;
        case 14: 
          { return SourcePawnTypes.QUEST;
          }
        case 101: break;
        case 17: 
          { return SourcePawnTypes.MINUS;
          }
        case 102: break;
        case 43: 
          { return SourcePawnTypes.MINUSMINUS;
          }
        case 103: break;
        case 30: 
          { return SourcePawnTypes.LT;
          }
        case 104: break;
        case 35: 
          { return SourcePawnTypes.DIVEQ;
          }
        case 105: break;
        case 47: 
          { return SourcePawnTypes.PERCEQ;
          }
        case 106: break;
        case 26: 
          { return SourcePawnTypes.LBRACKET;
          }
        case 107: break;
        case 46: 
          { return SourcePawnTypes.XOREQ;
          }
        case 108: break;
        case 44: 
          { return SourcePawnTypes.OREQ;
          }
        case 109: break;
        case 37: 
          { return SourcePawnTypes.FLOAT_LITERAL;
          }
        case 110: break;
        case 12: 
          { return SourcePawnTypes.EXCL;
          }
        case 111: break;
        case 41: 
          { return SourcePawnTypes.PLUSPLUS;
          }
        case 112: break;
        case 4: 
          { return SourcePawnTypes.ASTERISK;
          }
        case 113: break;
        case 28: 
          { return SourcePawnTypes.SEMICOLON;
          }
        case 114: break;
        case 57: 
          { return SourcePawnTypes.FLOAT_TAG;
          }
        case 115: break;
        case 34: 
          { return SourcePawnTypes.C_STYLE_COMMENT;
          }
        case 116: break;
        case 13: 
          { return SourcePawnTypes.TILDE;
          }
        case 117: break;
        case 56: 
          { return SourcePawnTypes.BOOL_TAG;
          }
        case 118: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
